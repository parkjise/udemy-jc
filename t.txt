리액트 스타일드 컴포넌트: 스타일 확장 실무 가이드
스타일드 컴포넌트의 가장 강력한 기능 중 하나인 **스타일 확장(extending)**에 대해 알아봅니다. 코드 중복을 최소화하고, 유지보수가 용이하며, 일관된 디자인 시스템을 구축하는 핵심 기술입니다.

✨ 핵심 아이디어: 공통 스타일을 가진 기본 컴포포넌트를 만들고, 이를 상속받아 약간의 차이가 있는 파생 컴포넌트들을 만듭니다.

🔧 1. 기본 스타일 확장: styled(Component)
가장 기본적인 스타일 확장 문법입니다. styled() 팩토리 함수에 다른 스타일드 컴포넌트를 전달하여 스타일을 상속받습니다.

JavaScript

const BaseComponent = styled.div`
  padding: 1rem;
  background-color: grey;
`;

const ExtendedComponent = styled(BaseComponent)`
  background-color: blue; /* BaseComponent의 스타일을 상속받고 일부만 변경 */
`;
🛠️ 2. 실무 예제: 다양한 종류의 버튼 만들기
웹 애플리케이션에서 가장 흔한 UI 요소인 버튼을 예제로 스타일 확장을 적용해 보겠습니다.

단계 1: 모든 버튼의 기초 BaseButton 만들기
모든 버튼이 공통으로 가질 스타일(레이아웃, 폰트, 기본 모양 등)을 정의합니다.

src/components/Button.js

JavaScript

import styled from 'styled-components';

const BaseButton = styled.button`
  /* 레이아웃 및 정렬 */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  
  /* 기본 모양 */
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.75rem 1.25rem;

  /* 폰트 */
  font-size: 1rem;
  font-weight: 600;

  /* 인터랙션 */
  cursor: pointer;
  transition: all 0.2s ease-in-out;

  /* 비활성화 상태 */
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
`;

export default BaseButton;
💡 Point!

일관성: 모든 버튼의 핵심 디자인(모서리 둥글기, 폰트 굵기 등)이 통일됩니다.
유지보수: 기본 정책 변경 시, BaseButton 한 곳만 수정하면 모든 버튼에 반영됩니다.
단계 2: BaseButton을 확장하여 다양한 버튼 만들기
BaseButton을 상속받아 목적에 맞는 Primary, Secondary, Danger 버튼을 만듭니다.

src/components/Button.js (이어서 작성)

JavaScript

// ... BaseButton 코드 ...

// 1. PrimaryButton: 가장 중요한 액션
export const PrimaryButton = styled(BaseButton)`
  background-color: #007bff;
  color: white;

  &:hover:not(:disabled) {
    background-color: #0056b3;
  }
`;

// 2. SecondaryButton: 보조 액션
export const SecondaryButton = styled(BaseButton)`
  background-color: white;
  color: #007bff;
  border: 1px solid #007bff;

  &:hover:not(:disabled) {
    background-color: #f0f8ff;
  }
`;

// 3. DangerButton: 위험한 액션 (삭제 등)
export const DangerButton = styled(BaseButton)`
  background-color: #dc3545;
  color: white;

  &:hover:not(:disabled) {
    background-color: #c82333;
  }
`;
단계 3: App.js에서 사용하기
src/App.js

JavaScript

import React from 'react';
import { PrimaryButton, SecondaryButton, DangerButton } from './components/Button';

function App() {
  return (
    <div style={{ display: 'flex', gap: '1rem', padding: '2rem' }}>
      <PrimaryButton>Primary Action</PrimaryButton>
      <SecondaryButton>Secondary Action</SecondaryButton>
      <DangerButton>Delete</DangerButton>
      <PrimaryButton disabled>Disabled Button</PrimaryButton>
    </div>
  );
}

export default App;
💎 3. 심화: props를 이용한 동적 스타일 확장
props를 받아 동적으로 스타일을 변경하는 로직을 기본 컴포넌트에 추가하여 확장성을 극대화할 수 있습니다. (예: 버튼 크기 조절)

단계 1: size prop에 따른 스타일 로직 추가
BaseButton에 size prop(large, small)을 처리하는 로직을 추가합니다.

src/components/Button.js (수정)

JavaScript

import styled, { css } from 'styled-components';

// 사이즈별 스타일을 정의
const sizeStyles = css`
  ${(props) =>
    props.size === 'large' &&
    css`
      padding: 1rem 1.75rem;
      font-size: 1.25rem;
    `}

  ${(props) =>
    props.size === 'small' &&
    css`
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    `}
`;

const BaseButton = styled.button`
  /* ... 기존 스타일 ... */

  /* 사이즈 관련 스타일 추가 */
  ${sizeStyles}
`;

// ... 다른 버튼들은 변경 없음 ...
단계 2: App.js에서 size prop 사용하기
src/App.js (수정)

JavaScript

// ...
<PrimaryButton size="large">Large Primary</PrimaryButton>
<SecondaryButton>Medium Secondary</SecondaryButton> {/* 기본 크기 */}
<DangerButton size="small">Small Danger</DangerButton>
// ...
💡 Point!
공통 로직(sizeStyles)을 BaseButton에 추가했기 때문에, PrimaryButton, SecondaryButton 등 모든 확장된 버튼에서 size prop을 바로 사용할 수 있습니다.

✅ 핵심 장점 및 결론
재사용성 (DRY): 공통 스타일의 중복을 제거합니다.
유지보수성: 기본 스타일 변경 시 모든 파생 컴포넌트에 일괄 적용됩니다.
가독성: styled(BaseButton) 문법으로 컴포넌트 간의 관계가 명확해집니다.
확장성: 새로운 종류의 컴포넌트를 일관된 디자인으로 빠르게 추가할 수 있습니다.











Canvas

Gemini는 인물 등에 관한 정보 제공 시 실수를 할 수 있